import { CoursePageModel } from "@/interfaces/courses";
import { MenuItem } from "@/interfaces/menu";
import { ProductModel } from "@/interfaces/product";
import { withLayout } from "@/layout/Layout/Layout";
import axios from "axios";
import { GetStaticPropsContext, GetStaticPaths } from "next";
import Head from "next/head";
import { ParsedUrlQuery } from "node:querystring";
import { FC } from "react";

const firstCategory = 0;

export function Course({ menu, course, products }: CourseProps): JSX.Element {
	return (
		<>
			<Head>
				<title>Courses shop</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main>Страница курсов</main>
			{course?.title}
			{products.length}
		</>
	);
}

export default withLayout(Course as FC);

export const getStaticPaths: GetStaticPaths = async () => {
	const menuInfoUrl = process.env.NEXT_PUBLIC_DOMAIN + "/api/top-page/find";
	const { data: menu } = await axios.post<MenuItem[]>(menuInfoUrl, {
		firstCategory,
	});

	return {
		paths: menu.flatMap((menuElement) =>
			menuElement.pages.map((p) => "/courses/" + p.alias)
		),
		fallback: true,
	};
};

export const getStaticProps = async ({
	params,
}: GetStaticPropsContext<ParsedUrlQuery>) => {
	if (!params) {
		return {
			notFound: true,
		};
	}

	const menuInfoUrl = process.env.NEXT_PUBLIC_DOMAIN + "/api/top-page/find";
	const { data: menu } = await axios.post<MenuItem[]>(menuInfoUrl, {
		firstCategory,
	});

	const courseInfoUrl =
		process.env.NEXT_PUBLIC_DOMAIN + "/api/top-page/byAlias/" + params.alias;
	console.log("courseInfoUrl ", courseInfoUrl);
	const { data: page } = await axios.get<CoursePageModel>(courseInfoUrl);

	const productInfoUrl = process.env.NEXT_PUBLIC_DOMAIN + "/api/product/find";
	const { data: products } = await axios.post<ProductModel[]>(productInfoUrl, {
		category: page.category,
		limit: 10,
	});
	console.log("productInfoUrl", productInfoUrl);

	return {
		props: {
			menu,
			page,
			products,
			firstCategory,
		},
	};
};

interface CourseProps {
	course: CoursePageModel;
	menu: MenuItem[];
	products: ProductModel[];
	firstCategory: number;
}
